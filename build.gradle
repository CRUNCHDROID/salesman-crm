
buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'salesman'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://repository.jboss.org/nexus/content/groups/public" }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.spring.io/milestone" }
    mavenCentral()
    mavenLocal()
    jcenter()
}

configurations {
    querydslapt
    provided
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/generated"]
        }
    }
}

buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
        querydslVersion = '4.1.4'
    }
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.springframework.data'
    }

    compile("org.springframework.boot:spring-boot-starter-batch")

    compile("org.springframework.boot:spring-boot-starter-remote-shell")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    //compile("org.springframework.boot:spring-boot-starter-ws")
    compile('org.springframework.data:spring-data-jpa:1.10.4.RELEASE')
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.0')



    compile("com.google.guava:guava:18.0")
    compile("org.azeckoski:reflectutils:0.9.20")

    compile("commons-beanutils:commons-beanutils:1.9.2")
    compile("org.springframework:spring-agent:2.5.6.SEC03")

    compile("org.apache.commons:commons-io:1.3.2")
    compile("commons-fileupload:commons-fileupload:1.3.1")
    compile("net.vidageek:mirror:1.6.1")
    compile("org.jdom:jdom:1.1")
    
    compile("mysql:mysql-connector-java:5.1.36")


    compile("org.codehaus.groovy:groovy-all:2.4.5")
    testCompile("org.spockframework:spock-core:1.1-groovy-2.4-rc-2")
    testCompile("org.spockframework:spock-spring:1.1-groovy-2.4-rc-2")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-all:2.0.2-beta")
    testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile("com.h2database:h2")

    testCompile("org.powermock:powermock-module-junit4:1.6.4")
    testCompile("org.dbunit:dbunit:2.5.1") {
        exclude group: "org.hamcrest"
    }
    testCompile('com.github.springtestdbunit:spring-test-dbunit:1.2.1') {
        exclude group: "org.hamcrest"
    }
    testCompile('org.powermock:powermock-api-mockito:1.6.4') {
        exclude group: "org.hamcrest"
    }

    testCompile("org.springframework.boot:spring-boot-starter-test")

    querydslapt("com.querydsl:querydsl-apt:$querydslVersion") {
        exclude module: "guava"
    }
    compile("com.querydsl:querydsl-jpa:${querydslVersion}") {
        exclude module: "guava"
        exclude module: 'querydsl-core'
    }

    compile("com.querydsl:querydsl-collections:${querydslVersion}") {
        exclude module: "guava"
        exclude module: 'querydsl-codegen'
    }

    compile("com.querydsl:querydsl-codegen:${querydslVersion}") {
        exclude module: 'querydsl-core'
    }

    compile("com.querydsl:querydsl-core:${querydslVersion}") {
        exclude module: "cglib"
    }

    compile("org.apache.commons:commons-lang3:3.4")
    compile("org.zalando.stups:spring-boot-starter-guava-eventbus:0.5.4")
    compile("com.google.code.gson:gson:2.7")
    compile("com.jayway.jsonpath:json-path:2.1.0")
    
    compile("com.trex:ddd-reflection:1.8.5")
    compile group: 'joda-time', name: 'joda-time', version: '2.9.4'
    compile("cglib:cglib:3.2.4")
    compile("com.github.wnameless:json-flattener:0.2.2")
    compile("br.com.uol.rest:rest-mediatype-support:1.8-SNAPSHOT")

    compile("org.reflections:reflections:0.9.10")
    compile group: 'org.apache.camel', name: 'camel-spring-boot-starter', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-aws', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-http4', version: '2.18.1'

}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
}

generateQueryDSL() {
    source = project.sourceSets.main.java
    destinationDir = file("src/main/generated")
}

compileJava {
    source = fileTree("src/main/java") + fileTree("src/main/generated")
}

clean {
    delete fileTree("src/main/generated/")
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}
